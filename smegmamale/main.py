
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8134096184:AAHJ3sCStLl6hSpM-zD2u26HoKs4J-ktXzA"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
habits = ["–°–ø–æ—Ä—Ç", "–ß—Ç–µ–Ω–∏–µ", "–í–æ–¥–∞ 2–ª","–í—ã–∫—É—Ä–∏—Ç—å –ø–∞—á–∫—É –ø–µ—Ç—Ä–æ –ø–∏—Ä–≤–æ–≤–æ"]
completions = {}  # {user_id: {date: [habit1, habit2]}}
partners = {}     # {user_id: partner_username}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
def get_habits_keyboard():
    return ReplyKeyboardMarkup([[habit] for habit in habits], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏ –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.\n"
        "üîπ –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: /partner @username",
        reply_markup=get_habits_keyboard()
    )

# –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏
async def track_habit(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    habit_name = update.message.text
    today = datetime.now().strftime('%Y-%m-%d')

    if habit_name not in habits:
        await update.message.reply_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user.id not in completions:
        completions[user.id] = {}

    if today not in completions[user.id]:
        completions[user.id][today] = []

    if habit_name in completions[user.id][today]:
        await update.message.reply_text(f"‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ ¬´{habit_name}¬ª —Å–µ–≥–æ–¥–Ω—è.")
    else:
        completions[user.id][today].append(habit_name)
        await update.message.reply_text(f"‚úÖ ¬´{habit_name}¬ª ‚Äî –æ—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
async def set_partner(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /partner @username")
        return

    partner_username = context.args[0].lstrip('@')
    partners[user.id] = partner_username
    await update.message.reply_text(
        f"üë• –ü–∞—Ä—Ç–Ω—ë—Ä @{partner_username} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å: /check"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
async def check_partner(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    today = datetime.now().strftime('%Y-%m-%d')

    if user.id not in partners:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ: /partner @username"
        )
        return

    partner_username = partners[user.id]
    partner_progress = []

    for uid, data in completions.items():
        if today in data:
            partner_progress.extend(data[today])

    if partner_progress:
        await update.message.reply_text(
            f"üìä –ü–∞—Ä—Ç–Ω—ë—Ä @{partner_username} —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏–ª:\n"
            "‚Ä¢ " + "\n‚Ä¢ ".join(partner_progress)
        )
    else:
        await update.message.reply_text(
            f"üò¢ –ü–∞—Ä—Ç–Ω—ë—Ä @{partner_username} —Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª.\n"
            "–ù–∞–ø–æ–º–Ω–∏—Ç–µ –µ–º—É! üòâ"
        )

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application –≤–º–µ—Å—Ç–æ Updater
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("partner", set_partner))
    application.add_handler(CommandHandler("check", check_partner))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_habit))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: Ctrl+C")

if __name__ == '__main__':
    main()